启动	redis-cli
测试redis服务是否已经启动	PING
key命令的基本语法：command key_name
设置一个缓存键值对 set key value
删除一个键值对 del key


redis HASH
1. 将多个f-v设置到hash表中：hmset key_name f1 v1 ... fn vn
    e.g.: hmset people Argos 23 Bob 21 Christine 12 Douglas 34 Eason 23 Franklin 78 George 21
    hmset computers ThinkPad China Asus China Toshiba Japan HP America Dell America Lenovo China MSI China Samsung Korea LG Korea Alienware America
2. 获取hash表中指定key的所有f-v：hgetall key_name
3. Delete a f-v from hash map: hdel key_name field1 field2...fieldn
    return: 被成功删除字段的数量，不包括被忽略的字段。
    e.g.: hdel people Argos Bob
4. Check whether a f-v exists in a hash map: hexists key_name field_name
    exits, returns 1; otherwise, returns 0;
    e.g.: hexists people Christine
5. 为表中的字段加上指定int增量: hincrby key_name field_name delta
    e.g.: hincrby people Christine 5; returns (integer) 17
    hincrby computers ThinkPad 1; returns (error) ERR hash value is not an integer
5. 为表中的字段加上指定float增量: hincrbyfloat key_name field_name delta
    e.g.: hincrbyfloat people Christine 0.5
6. 获取指定hash map中所有的field: hkeys key
    e.g.: hkeys people
7. 获取field数量: hlen key_name
    e.g.: hlen people
8. 返回哈希表中，一个或多个给定字段的值。如果指定的字段不存在于哈希表，那么返回一个 nil 值. hmget key_name field1 field2 ... fieldn
    e.g.: hmget people Douglas Franklin
9. 批量set: HMSET KEY_NAME FIELD1 VALUE1 ...FIELDN VALUEN
    e.g.: hmset color R Red G Green B Blue
10. 为哈希表中的字段赋值: hset key_name k v
    e.g.: hset color R Racheal
11. 为哈希表中不存在的的字段赋值: HSETNX KEY_NAME FIELD VALUE
    e.g.: hsetnx color R Ruby
12. 返回哈希表所有域(field)的值: hvals key_name
    e.gl: hvals color
    
redis LIST
1. 向表中插入一个或者多个数据: lpush key_name v1 v2 ... vn
    e.g.: lpush city Nanjing
        lpush city Oxford NewYork
2. 从表头移除并获取第一个元素, 阻塞: blpop key_name timeout
    e.g.:  blpop city 10
    returns: 1) "city"
            2) "NewYork"
3. 从表尾移除并获取元素: brpop key_name timeout
    e.g.: brpop city 1
4. 从表1尾移除一个元素并插入表2头: brpoplpush list1 list2 timeout
    e.g.: lpush msg "Konnichiwa"
    lpush msg Ohayo gozaimasu
    brpoplpush msg reciever 300
5. 根据index从表中元素list[index]: lindex list index
    e.g.: lindex city 0
    returns: "Oxford"
6. 指定在表中已有元素的前/后插入元素，如果pivot不存在那么返回-1: linsert list after|before pivot value
    e.g.: linsert city before Oxford Paris
        linsert city after Oxford Tokyo
7. 获取list长度: llen list
    e.g.: llen city
8. 移除表中的第一个元素并返回该元素，和blpop的不同之处在没有timeout: lpop list
    e.g.: lpop city 
9. 移除表中的最后一个元素并返回该元素，和brpop的不同之处在没有timeout: rpop list
    e.g.: rpop city 
10. 插入元素到已经存在的表头，返回list长度: lpushx list value
    e.g.: lpushx country US
11. 从表头开始依次删除count个元素: lrem list count value
    e.g.: lrem country  2 US
12. 根据index设置元素: lset list index value
    e.g.: lset city 0 Beijing
13. 修剪列表，删除不在范围内的元素: ltrim list start stop
    e.g.: ltrim country 0 4
14. 从表source中取最后一个元素并设置位dest的第一个: rpoplpush source dest
    e.g.: rpoplpush msg reciever
15. 在表尾插入元素: rpush list value
    e.g.: rpush msg hello
16. 在已有表的尾部插入元素: rpushx list value
    e.g.: rpushx msg hi
    
集合SET
1. 向集合set_key中插入元素value: sadd set_key value [v ...]
    e.g.: sadd day Mon
    sadd day Tue Wed
2. 删除一个或多个元素srem key member [member ...]
    e.g.: srem day Sat Thu
3. 获取set中的元素个数：scard key
    e.g.: scard day
4. set1-set2差集：sdiff set1 set2
    e.g.: sdiff day day0
5. 求差集并存储：sdiffstore dest set1 set2
6. 求交集：sinter set1 set2
7. 求交集并存储：sinterstore set0 set1 set2
8. 判断集合set中是否有元素value: sismember set value
9. 返回集合set中的所有元素：smembers set
10. 将元素v移动从source到dest： smove source dest v
11. 从集合set中随机删除并返回count个元素: spop set count
12. 从集合set中随机返回count个元素: srandmember set count
13. set1 set2并集: sunion set1 set2
14. 求set1 set2的并集并存储: sunionstore dest set1 set2

有序集合
1	ZADD key score1 member1 [score2 member2] 
向有序集合添加一个或多个成员，或者更新已存在成员的分数
2	ZCARD key 
获取有序集合的成员数
3	ZCOUNT key min max 
计算在有序集合中指定区间分数的成员数
4	ZINCRBY key increment member 
有序集合中对指定成员的分数加上增量 increment
5	ZINTERSTORE destination numkeys key [key ...] 
计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中
6	ZLEXCOUNT key min max 
在有序集合中计算指定字典区间内成员数量
7	ZRANGE key start stop [WITHSCORES] 
通过索引区间返回有序集合成指定区间内的成员
8	ZRANGEBYLEX key min max [LIMIT offset count] 
通过字典区间返回有序集合的成员
9	ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] 
通过分数返回有序集合指定区间内的成员
10	ZRANK key member 
返回有序集合中指定成员的索引
11	ZREM key member [member ...] 
移除有序集合中的一个或多个成员
12	ZREMRANGEBYLEX key min max 
移除有序集合中给定的字典区间的所有成员
13	ZREMRANGEBYRANK key start stop 
移除有序集合中给定的排名区间的所有成员
14	ZREMRANGEBYSCORE key min max 
移除有序集合中给定的分数区间的所有成员
15	ZREVRANGE key start stop [WITHSCORES] 
返回有序集中指定区间内的成员，通过索引，分数从高到底
16	ZREVRANGEBYSCORE key max min [WITHSCORES] 
返回有序集中指定分数区间内的成员，分数从高到低排序
17	ZREVRANK key member 
返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
18	ZSCORE key member 
返回有序集中，成员的分数值
19	ZUNIONSTORE destination numkeys key [key ...] 
计算给定的一个或多个有序集的并集，并存储在新的 key 中
20	ZSCAN key cursor [MATCH pattern] [COUNT count] 
迭代有序集合中的元素（包括元素成员和元素分值）
